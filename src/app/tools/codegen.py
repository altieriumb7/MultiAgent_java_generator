from __future__ import annotations
from pathlib import Path
from typing import Dict, Any
from jinja2 import Environment, BaseLoader

JAVA_MAIN = Path("src/main/java"); RES_MAIN = Path("src/main/resources")
env = Environment(loader=BaseLoader(), trim_blocks=True, lstrip_blocks=True)

def _java_type(t: str) -> str:
    t = (t or "string").lower()
    return {"string":"String","int":"Integer","integer":"Integer","long":"Long","float":"Float",
            "double":"Double","bool":"Boolean","boolean":"Boolean","datetime":"java.time.OffsetDateTime",
            "date":"java.time.LocalDate"}.get(t,"String")

def _class_name(key: str, suffix: str) -> str:
    import re; parts = [p for p in re.split(r"[^a-zA-Z0-9]+", key) if p]
    return ''.join(p.capitalize() for p in parts) + suffix

DTO_RECORD_T = env.from_string("package {{ pkg }}.dto;\n\npublic record {{ cls }}(\n{% for f in fields -%}\n  {{ f.java_type }} {{ f.name }}{% if not loop.last %},{% endif %}\n{% endfor -%}\n) {}\n")
DTO_LOMBOK_T = env.from_string("package {{ pkg }}.dto;\n\nimport lombok.Data;\n\n@Data\npublic class {{ cls }} {\n{% for f in fields %}  private {{ f.java_type }} {{ f.name }};\n{% endfor %}}\n")
DTO_PLAIN_T = env.from_string("package {{ pkg }}.dto;\n\npublic class {{ cls }} {\n{% for f in fields %}  private {{ f.java_type }} {{ f.name }};\n{% endfor %}\n  public {{ cls }}() {}\n{% for f in fields %}\n  public {{ f.java_type }} get{{ f.name|capitalize }}(){ return {{ f.name }}; }\n  public void set{{ f.name|capitalize }}({{ f.java_type }} {{ f.name }}){ this.{{ f.name }} = {{ f.name }}; }\n{% endfor %}}\n")
MAPPER_T = env.from_string("package {{ pkg }}.mapper;\n{% if mapstruct %}\nimport org.mapstruct.*;\nimport {{ pkg }}.dto.*;\nimport {{ pkg }}.client.model.*;\n\n@Mapper(componentModel = \"spring\")\npublic interface {{ cls }} {\n  {{ resp }} toDto({{ ext }} src);\n}\n{% else %}\nimport {{ pkg }}.dto.*;\nimport {{ pkg }}.client.model.*;\npublic class {{ cls }} {\n  public {{ resp }} toDto({{ ext }} src){ return new {{ resp }}(); }\n}\n{% endif %}\n")
CLIENT_T_FEIGN = env.from_string("package {{ pkg }}.client;\n\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.cloud.openfeign.FeignClient;\nimport {{ pkg }}.client.model.*;\n\n@FeignClient(name = \"{{ name }}\", url = \"${{ prop_key }}\")\npublic interface {{ name }} {\n\n  @RequestMapping(method = RequestMethod.{{ method }}, value = \"{{ path }}\")\n  {{ ret }} call({{ params }});\n}\n")
SERVICE_T = env.from_string("package {{ pkg }}.service;\n\nimport org.springframework.stereotype.Service;\nimport lombok.RequiredArgsConstructor;\nimport {{ pkg }}.dto.*;\nimport {{ pkg }}.mapper.{{ mapper }};\nimport {{ pkg }}.client.{{ client }};\n\n@Service\n@RequiredArgsConstructor\npublic class {{ cls }} {\n  private final {{ client }} client;\n  private final {{ mapper }} mapper;\n\n  public {{ resp }} {{ method_name }}({{ req }} req){\n    var external = client.call(null);\n    return mapper.toDto(external);\n  }\n}\n")
CONTROLLER_T = env.from_string("package {{ pkg }}.controller;\n\nimport org.springframework.web.bind.annotation.*;\nimport lombok.RequiredArgsConstructor;\nimport {{ pkg }}.service.{{ service }};\nimport {{ pkg }}.dto.*;\n\n@RestController\n@RequestMapping(\"/api\")\n@RequiredArgsConstructor\npublic class {{ cls }} {\n  private final {{ service }} service;\n\n  @{{ http }}(\"{{ path }}\")\n  public {{ resp }} handle(@RequestBody {{ req }} body){\n    return service.{{ method_name }}(body);\n  }\n}\n")
PROPS_T = env.from_string("# Auto-generated by CrewAI codegen\n{% for e in endpoints %}{{ e.key }}={{ e.path }}\n{% endfor %}\n")

def render_artifacts(spec: Dict[str, Any], style: Dict[str, Any]) -> Dict[Path, str]:
    out: Dict[Path, str] = {}; base_pkg = style.get('base_package','com.example.app'); pkg_path = Path(*base_pkg.split('.'))
    use_mapstruct = bool(style.get('use_mapstruct', False)); use_feign = style.get('use_feign', True)
    java_version = int(style.get('java_version', 11)); use_lombok = bool(style.get('use_lombok', False)); use_records = bool(style.get('use_records', False))
    for ep in spec.get('endpoints', []):
        key = ep['key']; req_cls = _class_name(key,'RequestDTO'); resp_cls = _class_name(key,'ResponseDTO'); mapper_cls = _class_name(key, style.get('mapper_suffix','Mapper'))
        client_cls = _class_name(key, style.get('client_suffix','Client')); service_cls = _class_name(key, style.get('service_suffix','Service')); controller_cls = _class_name(key, style.get('controller_suffix','Controller'))
        method_name = 'handle' + _class_name(key,'')
        req_fields = [{"name": f['name'], "java_type": _java_type(f['type'])} for f in ep.get('request', [])]; res_fields = [{"name": f['name'], "java_type": _java_type(f['type'])} for f in ep.get('response', [])]
        if use_records and java_version >= 17:
            out[(JAVA_MAIN / pkg_path / 'dto' / f"{req_cls}.java")] = DTO_RECORD_T.render(pkg=base_pkg, cls=req_cls, fields=req_fields)
            out[(JAVA_MAIN / pkg_path / 'dto' / f"{resp_cls}.java")] = DTO_RECORD_T.render(pkg=base_pkg, cls=resp_cls, fields=res_fields)
        elif use_lombok:
            out[(JAVA_MAIN / pkg_path / 'dto' / f"{req_cls}.java")] = DTO_LOMBOK_T.render(pkg=base_pkg, cls=req_cls, fields=req_fields)
            out[(JAVA_MAIN / pkg_path / 'dto' / f"{resp_cls}.java")] = DTO_LOMBOK_T.render(pkg=base_pkg, cls=resp_cls, fields=res_fields)
        else:
            out[(JAVA_MAIN / pkg_path / 'dto' / f"{req_cls}.java")] = DTO_PLAIN_T.render(pkg=base_pkg, cls=req_cls, fields=req_fields)
            out[(JAVA_MAIN / pkg_path / 'dto' / f"{resp_cls}.java")] = DTO_PLAIN_T.render(pkg=base_pkg, cls=resp_cls, fields=res_fields)
        out[(JAVA_MAIN / pkg_path / 'mapper' / f"{mapper_cls}.java")] = MAPPER_T.render(pkg=base_pkg, cls=mapper_cls, resp=resp_cls, ext=_class_name(key,'ExternalModel'), mapstruct=use_mapstruct)
        if use_feign:
            out[(JAVA_MAIN / pkg_path / 'client' / f"{client_cls}.java")] = CLIENT_T_FEIGN.render(pkg=base_pkg, name=client_cls, prop_key=f"{style.get('properties_prefix', key) or key}.endpoint",
                                                                                                  method=(ep.get('method','GET').upper()), path=ep.get('path','/'), ret=_class_name(key,'ExternalModel'),
                                                                                                  params=("Object body" if ep.get('method','').upper()=='POST' else ""))
        out[(JAVA_MAIN / pkg_path / 'client' / 'model' / f"{_class_name(key,'ExternalModel')}.java")] = f"package {base_pkg}.client.model;\npublic class {_class_name(key,'ExternalModel')} {{}}\n"
        http_method = ep.get('method','GET').upper(); http_annot = 'GetMapping' if http_method=='GET' else ('PostMapping' if http_method=='POST' else 'RequestMapping')
        out[(JAVA_MAIN / pkg_path / 'service' / f"{service_cls}.java")] = SERVICE_T.render(pkg=base_pkg, mapper=mapper_cls, client=client_cls, cls=service_cls, resp=resp_cls, req=req_cls, method_name=method_name)
        out[(JAVA_MAIN / pkg_path / 'controller' / f"{controller_cls}.java")] = CONTROLLER_T.render(pkg=base_pkg, service=service_cls, cls=controller_cls, resp=resp_cls, req=req_cls, http=http_annot, path=ep.get('path','/'), method_name=method_name)
    entries = [{"key": f"{(style.get('properties_prefix') or ep['key'])}.endpoint", "path": ep.get('path','/')} for ep in spec.get('endpoints', [])]
    out[(RES_MAIN / 'application.properties')] = PROPS_T.render(endpoints=entries); return out
